@mixin gradient($time) {
      // Gradient Animator
  // https://www.gradient-animator.com/
  background: linear-gradient(30deg,#403a3e,
  #BE5869);
  background-size: 880% 80%;
  
  -webkit-animation: gradient $time ease infinite;
  -moz-animation: gradient $time ease infinite;
  animation: gradient $time ease infinite;
  
  @-webkit-keyframes gradient {
      0%{background-position:20% 0%}
      50%{background-position:81% 100%}
      100%{background-position:20% 0%}
  }
  @-moz-keyframes gradient {
      0%{background-position:20% 0%}
      50%{background-position:81% 100%}
      100%{background-position:20% 0%}
  }
  @keyframes gradient { 
      0%{background-position:20% 0%}
      50%{background-position:81% 100%}
      100%{background-position:20% 0%}
  }
  

}

$bpFeatures: "min",
"max",
"within";
@mixin bp($feature, $width:"", $within_max:"") {
    $stringWidth: false;
    $within_max_set: false;
    $mapWidth: null !default;
    $maxWidth: null !default;
    $minWidth: null !default;
    //if width is not blank and string, get values from $breakpoints
    @if not ($width=="") and (type-of($width)=="string") {
        @if map-has-key($bp, $width) {
            $mapWidth: map-get($bp, $width);
            $maxWidth: map-get($mapWidth, "max");
            $minWidth: map-get($mapWidth, "min");
            $stringWidth: true;
        }
    }
    //check if $within_max set and is number
    @if not($within_max=="") and type-of($within_max=="number") {
        $within_max_set: true;
    }
    // if $feature is a string
    @if type-of($feature)=="string" {
        //lowercase the string
        $feature: to-lower-case($feature);
        //if $feature within $bpFeatures
        @if index($bpFeatures, $feature) {
            // if $feature value is 'within'
            @if $feature=="within" {
                //if width is not string and $within_max has a number value
                @if (not $stringWidth and $within_max_set) or ($stringWidth and not $within_max_set) {
                    @if not $stringWidth {
                        $maxWidth: $within_max;
                        $minWidth: $width;
                    }
                    @if $maxWidth < $minWidth {
                        @error "SASS Mixin bp(): Breakpoint min and max not in correct order. Should follow: bp('within', $min, $max)";
                    }
                    @media only screen and (min-width: $minWidth) and (max-width: $maxWidth) {
                        @content;
                    }
                    //if width is string and no within max set
                }
                @else {
                    @error "SASS Mixin bp(): Width values incorrect. Values need to be within $breakpoints or a min and max number.";
                }
            }
            @else {
                @if $within_max_set {
                    @warn "SASS Mixin bp(): $within_max value not set."
                }
                @if not $stringWidth {
                    $minWidth: $width;
                    $maxWidth: $width;
                }
                @if $feature=="min" {
                    @media only screen and (min-width: $minWidth) {
                        @content;
                    }
                }
                @else if $feature=="max" {
                    @media only screen and (max-width: $maxWidth) {
                        @content;
                    }
                }
            }
        }
    }
    @else {
        @error "SASS Mixin bp(): $feature paramater not string or within $bpFeatures.";
    }
}

$bpFeatures: "min",
"max",
"within";
@mixin bp($feature, $width:"", $within_max:"") {
    $stringWidth: false;
    $within_max_set: false;
    $mapWidth: null !default;
    $maxWidth: null !default;
    $minWidth: null !default;
    //if width is not blank and string, get values from $breakpoints
    @if not ($width=="") and (type-of($width)=="string") {
        @if map-has-key($bp, $width) {
            $mapWidth: map-get($bp, $width);
            $maxWidth: map-get($mapWidth, "max");
            $minWidth: map-get($mapWidth, "min");
            $stringWidth: true;
        }
    }
    //check if $within_max set and is number
    @if not($within_max=="") and type-of($within_max=="number") {
        $within_max_set: true;
    }
    // if $feature is a string
    @if type-of($feature)=="string" {
        //lowercase the string
        $feature: to-lower-case($feature);
        //if $feature within $bpFeatures
        @if index($bpFeatures, $feature) {
            // if $feature value is 'within'
            @if $feature=="within" {
                //if width is not string and $within_max has a number value
                @if (not $stringWidth and $within_max_set) or ($stringWidth and not $within_max_set) {
                    @if not $stringWidth {
                        $maxWidth: $within_max;
                        $minWidth: $width;
                    }
                    @if $maxWidth < $minWidth {
                        @error "SASS Mixin bp(): Breakpoint min and max not in correct order. Should follow: bp('within', $min, $max)";
                    }
                    @media only screen and (min-width: $minWidth) and (max-width: $maxWidth) {
                        @content;
                    }
                    //if width is string and no within max set
                }
                @else {
                    @error "SASS Mixin bp(): Width values incorrect. Values need to be within $breakpoints or a min and max number.";
                }
            }
            @else {
                @if $within_max_set {
                    @warn "SASS Mixin bp(): $within_max value not set."
                }
                @if not $stringWidth {
                    $minWidth: $width;
                    $maxWidth: $width;
                }
                @if $feature=="min" {
                    @media only screen and (min-width: $minWidth) {
                        @content;
                    }
                }
                @else if $feature=="max" {
                    @media only screen and (max-width: $maxWidth) {
                        @content;
                    }
                }
            }
        }
    }
    @else {
        @error "SASS Mixin bp(): $feature paramater not string or within $bpFeatures.";
    }
}
